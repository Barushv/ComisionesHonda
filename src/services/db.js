const DB_NAME='comisionesgo-db'; const DB_VERSION=1; const STORE='state'; let _db=null;
function openDB(){ return new Promise((resolve,reject)=>{ const req=indexedDB.open(DB_NAME,DB_VERSION); req.onupgradeneeded=(e)=>{const db=e.target.result; if(!db.objectStoreNames.contains(STORE)){ db.createObjectStore(STORE);} }; req.onsuccess=()=>resolve(req.result); req.onerror=()=>reject(req.error); }); }
async function db(){ if(_db) return _db; _db=await openDB(); return _db; }
export async function loadState(){ try{ const database=await db(); return await new Promise((res,rej)=>{ const tx=database.transaction(STORE,'readonly'); const s=tx.objectStore(STORE); const r=s.get('state'); r.onsuccess=()=>res(r.result||null); r.onerror=()=>rej(r.error); }); } catch(e){ const raw=localStorage.getItem('comisionesgo-v1'); return raw?JSON.parse(raw):null; } }
export async function saveState(data){ try{ const database=await db(); await new Promise((res,rej)=>{ const tx=database.transaction(STORE,'readwrite'); const s=tx.objectStore(STORE); const r=s.put(data,'state'); r.onsuccess=()=>res(); r.onerror=()=>rej(r.error); }); } catch(e){ localStorage.setItem('comisionesgo-v1', JSON.stringify(data)); } }